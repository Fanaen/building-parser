short_comment = _{ "--" ~ (!NEWLINE ~ ANY)* }
long_comment = _{ "(*" ~ (!( "*)" ) ~ ANY)* ~ "*)"}
comment = _{ long_comment | short_comment }

space = _{ WHITE_SPACE | NEWLINE }
spaces = _{ space* }

name = { (ASCII_ALPHANUMERIC | "_" )+ }
number = { ASCII_DIGIT+ }

string_type = { "STRING" ~ spaces ~ ( "(" ~ spaces ~ number ~ spaces ~ ")" ~ spaces ~ "FIXED")?}

primitive_type = {
   "REAL"
 | "INTEGER"
 | "NUMBER"
 | string_type
 | "BINARY"
 | "BOOLEAN"
 | "LOGICAL"
}

primitive_or_named_type = _{ primitive_type | name }

aggregation_type = {
   "LIST"
 | "ARRAY"
 | "SET"
 | "BAG"
}


enumeration = { "ENUMERATION" ~ spaces ~ "OF" ~ spaces ~ "(" ~ (spaces ~ name ~ spaces ~ ",")* ~ spaces ~ name ~ spaces ~ ")"  }
select = { "SELECT" ~ spaces ~ "(" ~ (spaces ~ name ~ spaces ~ ",")* ~ spaces ~ name ~ spaces ~ ")"  }

aggregation_min_numbering = { ASCII_DIGIT+ }
aggregation_max_numbering = { ( "?" | ASCII_DIGIT+) }
aggregation_numbering = { ( "[" ~spaces ~ aggregation_min_numbering ~ spaces ~":" ~spaces ~ aggregation_max_numbering ~spaces ~ "]" )? }

aggregation = { aggregation_type ~ spaces ~ aggregation_numbering ~ spaces ~ "OF" ~ spaces ~ primitive_or_named_type }


definable_data_type = _{
   aggregation
 | enumeration
 | select
 | primitive_type
 | name
}


defined_data_type = { "TYPE " ~ spaces ~ name ~ spaces ~ "=" ~ spaces ~ definable_data_type ~ spaces ~ ";" ~ defined_data_type_content ~ "END_TYPE;"}
defined_data_type_content = _{ (!( "END_TYPE;" ) ~ ANY)* }

entity = { "ENTITY " ~ spaces ~ name ~ spaces ~ entity_content ~ "END_ENTITY;"}
entity_content = _{ (!( "END_ENTITY;" ) ~ ANY)* }

constant = { "CONSTANT " ~ spaces ~ constant_content ~ spaces ~ "END_ENTITY;"}
constant_content = _{ (!( "END_CONSTANT;" ) ~ ANY)* }

function = { "FUNCTION " ~ spaces ~ function ~ function_content ~ "END_FUNCTION;"}
function_content = _{ (!( "END_FUNCTION;" ) ~ ANY)* }

unparsed = { !( "END_SCHEMA;" ) ~ ANY }

instruction = _{
   schema
 | defined_data_type
 | entity
 | comment
 | space
 | unparsed
}

schema = { "SCHEMA" ~ spaces ~ name ~ spaces ~ ";" ~ (instruction)* ~ "END_SCHEMA;" }
express = _{ (schema | comment | space)* }